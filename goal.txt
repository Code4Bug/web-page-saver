自动化数据抓取系统功能描述

1. 系统组成
- 本地服务端（Server）
  使用 Go 开发，运行在用户本地。
  负责与浏览器插件建立 WebSocket 通道，接收并处理 DOM 信息或指令数据。
  提供命令行界面，支持用户交互和状态显示。

- 浏览器插件（Agent）
  运行于 Chrome 浏览器中，包含 content-script 与 background.js：
  content-script：注入网页，负责捕获用户操作（DOM 事件、元素信息等）。
  background.js：插件后台核心，接收 content-script 数据，通过 WebSocket 传递给本地服务端。

2. 系统工作流程
- 用户启动本地服务端。
- 服务端监听 WebSocket 端口，等待浏览器插件连接。
- 用户打开浏览器，插件加载但不自动连接。
- 用户点击浏览器插件图标以激活插件。
- 插件激活后尝试与本地服务端建立连接。
- 未连接时：服务端提示“等待浏览器 Agent 连接...”
- 连接成功：服务端提示“连接已建立，本地命令行可用”。
- 用户通过命令行或网页操作与系统交互。
- 用户再次点击插件图标可停用插件并断开连接。

3. 插件功能逻辑
- 激活状态：
  插件默认处于未激活状态，用户点击浏览器插件图标后进入激活模式，监听网页 DOM 操作事件。
- DOM 捕获与高亮：
  鼠标悬停（mouseover）在 DOM 元素上时，自动添加半透明蒙层高亮显示。
  用户点击（click）DOM 元素时，采集以下信息：
    * 标签名（tagName）
    * id、class、name 等属性
    * 文本内容（textContent）
    * XPath 或 CSS Selector
    * 位置信息（bounding box）
- 数据传输：
  content-script 将 DOM 信息发送至 background.js。
  background.js 通过 WebSocket 将数据传递至本地服务端。
  服务端接收并处理数据（打印、存储、任务触发等）。
- 状态提示：
  DOM 信息成功传输后，网页右下角提示“DOM 元素信息已发送至本地服务”。
  插件激活/停用时，网页右下角提示相应状态。

4. 服务端功能逻辑
- 连接管理：
  检测插件连接状态，未连接则保持等待提示。
- 命令行交互：
  用户在命令行输入指令，服务端通过 WebSocket 下发至插件。
  插件在网页中执行对应逻辑，并返回结果。
- 结果回显：
  插件结果返回后，服务端在命令行打印或进行进一步处理。
- 状态通知：
  服务端接收插件的激活/停用状态通知并显示相应信息。

5. 使用场景示例
- 启动本地服务端 → 提示“等待浏览器 Agent 连接...”
- 打开浏览器 → 插件已加载但未激活
- 点击浏览器插件图标 → 插件激活并连接 → 服务端提示“连接已建立，本地命令行可用”
- 在网页悬停并点击元素 → 插件高亮 → 采集 DOM 信息
- 插件通过 WebSocket 将数据传递至服务端 → 服务端显示结果
- 用户可在命令行继续下发操作指令，插件执行并返回执行结果
- 再次点击插件图标 → 插件停用并断开连接